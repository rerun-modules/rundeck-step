#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-plugin:node-step-plugin: "create a node step plugin"
#/ usage: rerun rundeck-plugin:node-step-plugin  --command <>  --module <> [ --dir <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh node-step-plugin || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-plugin:node-step-plugin. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: COMMAND MODULE DIR

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# Default DIR to current working directory, if unspecified by user.
: ${DIR:=$(pwd)}

MODULES_DIR=$(dirname $RERUN_MODULE_DIR)


#
# generate_config_property - Generate a config entry for the plugin.yaml
#
generate_config_property() {
	[[ $# = 2 ]] || { printf >&2 'usage: generate_config_property module option' ; return 2; }
	local module=$1
	local option=$2	
	local option_dir="$MODULES_DIR/$module/options/$option"

	local arguments=$(rerun_property_get "$option_dir" ARGUMENTS)
	local default=$(rerun_property_get "$option_dir" DEFAULT)
	local description=$(rerun_property_get "$option_dir" DESCRIPTION)

	if [[ "$arguments" == "false" ]]
	then
		# Generate a boolean property
		printf -- "    - type: Boolean\n"
		printf -- "      name: %s\n" "$option"
		printf -- "      title: %s\n" "$option"
		printf -- "      description: %s\n" "$description"
		printf -- "      default: false\n"
	else
		# Generate a string property
		printf -- "    - type: String\n"
		printf -- "      name: %s\n" "$option"
		printf -- "      title: %s\n" "$option"
		printf -- "      description: %s\n" "$description"
		[[ -n "$default" ]] && {
		printf -- "      default: %s\n" "$default"
		}
	fi
}


#
# generate_command_args - Generate command line argument string.
#
generate_command_args() {
	[[ $# = 2 ]] || { printf >&2 'usage: generate_command_args module option' ; return 2; }	
	local module=$1
	local command=$2
	local clopts=()
	for option in $(rerun_options $MODULES_DIR $module $command)
	do
		local option_dir="$MODULES_DIR/$module/options/$option"
		local arguments=$(rerun_property_get "$option_dir" ARGUMENTS)
		if [[ "$arguments" == "false" ]]
		then
			clopts=(${clopts[*]:-} --${option})
		else
		    local varname=$(printf "$option" | tr '[:lower:]' '[:upper:]' | tr  '-' '_')
			clopts=(${clopts[*]:-} "--${option} \"\${RD_CONFIG_${varname}}\"")
		fi
	done
	printf "%s" "${clopts[*]}"
}

PLUGIN_NAME="rerun-$MODULE-$COMMAND-plugin"
DESCRIPTION=$(rerun_property_get $MODULES_DIR/$MODULE/commands/$COMMAND DESCRIPTION)

# Create the directory hierarchy for the plugin
mkdir -p "$DIR/$PLUGIN_NAME"
mkdir -p "$DIR/$PLUGIN_NAME/contents"

# Generate the README for the plugin
if [[ ! -f $DIR/README.md ]]
then
sed \
	-e "s/%MODULE%/$MODULE/g" \
	-e "s/%COMMAND%/$COMMAND/g" \
	$RERUN_MODULE_DIR/templates/README.md > $DIR/README.md
fi

# Generate the Makefile for the plugin
if [[ ! -f $DIR/Makefile ]]
then	
sed \
	-e "s/%MODULE%/$MODULE/g" \
	-e "s/%COMMAND%/$COMMAND/g" \
	$RERUN_MODULE_DIR/templates/Makefile > $DIR/Makefile
fi

plugin_service="RemoteScriptNodeStep"

# Generate the plugin.yaml 
cat > $DIR/$PLUGIN_NAME/plugin.yaml <<EOF
# Generated by rundeck-plugin:node-step-plugin. Do not edit.
name: rerun-$MODULE-$COMMAND-plugin
version: 1.0
rundeckPluginVersion: 1.0
author: $USER
date: $(date)
providers:
  - name: rerun-$MODULE-$COMMAND-step
    service: ${plugin_service}
    title: $MODULE:$COMMAND
    description: $DESCRIPTION
    plugin-type: script
    script-interpreter: /bin/bash
    script-file: nodestep.sh
    config:
$(for option in $(rerun_options $MODULES_DIR $MODULE $COMMAND); do 
printf "%s\n" "$(generate_config_property $MODULE $option)"; 
done)
    - type: Select
      name: loglevel
      title: Loglevel
      description: The log level
      default: info
      values:
          - debug
          - info
          - warn
          - error
          - fatal
EOF

CLOPTS=$(generate_command_args $MODULE $COMMAND)
# Generate the execution script
sed \
	-e "s/%MODULE%/$MODULE/g" \
	-e "s/%COMMAND%/$COMMAND/g" \
	-e "s/%OPTIONS%/$CLOPTS/g" \
	$RERUN_MODULE_DIR/templates/nodestep.sh > $DIR/$PLUGIN_NAME/contents/nodestep.sh

# Generate a sample job.yaml that calls the plugin step.
cat > $DIR/job.yaml <<EOF
# Generated by rundeck-plugin:node-step-plugin.
- name: $MODULE:$COMMAND
  description: '$DESCRIPTION'  
  loglevel: INFO
  sequence:
    keepgoing: false
    strategy: node-first
    commands:
    - type: rerun-$MODULE-$COMMAND-step
      nodeStep: true
      configuration:
$(for option in $(rerun_options $MODULES_DIR $MODULE $COMMAND); do 
printf "        %s: %s\n" "$option" "\${option.$option}"; 
done)       
  options:
$(for option in $(rerun_options $MODULES_DIR $MODULE $COMMAND); do 
printf "    %s:\n" "$option"; 
printf "      description: %s\n" "$(rerun_property_get "$MODULES_DIR/$MODULE/options/$option" DESCRIPTION)"; 
done)  
EOF

# Done. Exit with last command exit status.
exit $?

