#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-plugin:job-step: "create a job"
#/ usage: rerun rundeck-plugin:job-step  --command <>  --module <> [ --dir <>] [ --job-group <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh job-step || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-plugin:job-step. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: COMMAND MODULE DIR JOB_GROUP

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# Default DIR to current working directory, if unspecified by user.
: ${DIR:=$(pwd)}

MODULES_DIR=$(dirname $RERUN_MODULE_DIR)


#
# generate_job_option - Generate an option entry for the job.yaml
#
generate_job_option() {
	[[ $# = 2 ]] || { printf >&2 'usage: generate_config_property module option' ; return 2; }
	local module=$1
	local option=$2	
	local option_dir="$MODULES_DIR/$module/options/$option"

	local arguments=$(rerun_property_get "$option_dir" ARGUMENTS)
	local default=$(rerun_property_get "$option_dir" DEFAULT)
	local description=$(rerun_property_get "$option_dir" DESCRIPTION)
	local required=$(rerun_property_get "$option_dir" REQUIRED)

	printf -- "    %s:\n" "$option"
	printf -- "      description: %s\n" "$description"
	if [[ -n "$required" ]]
	then
		printf -- "      required: true\n"
	fi
	if [[ -n "$default" ]]
	then
		printf -- "      value: '%s'\n" "$default"
	fi
}


#
# generate_command_args - Generate command line argument string.
#
generate_command_args() {
	[[ $# = 2 ]] || { printf >&2 'usage: generate_command_args module option' ; return 2; }	
	local module=$1
	local command=$2
	local clopts=()
	for option in $(rerun_options $MODULES_DIR $module $command)
	do
		local option_dir="$MODULES_DIR/$module/options/$option"
		local arguments=$(rerun_property_get "$option_dir" ARGUMENTS)
		if [[ "$arguments" == "false" ]]
		then
			clopts=(${clopts[*]:-} --${option})
		else
			clopts=(${clopts[*]:-} "--${option} \"\${option.${option}}\"")
		fi
	done
	printf "%s" "${clopts[*]}"
}


DESCRIPTION=$(rerun_property_get $MODULES_DIR/$MODULE/commands/$COMMAND DESCRIPTION)

CLOPTS=$(generate_command_args $MODULE $COMMAND)

# Generate the job.yaml 
cat > $DIR/job.yaml <<EOF
# Generated by rundeck-plugin:job-step.
- name: $MODULE:$COMMAND
  description: '$DESCRIPTION'  
  group: ${JOB_GROUP:-}
  loglevel: INFO
  sequence:
    keepgoing: false
    strategy: node-first
    commands:
    - exec: rerun $MODULE:$COMMAND ${CLOPTS[*]:-}
  options:
$(for option in $(rerun_options $MODULES_DIR $MODULE $COMMAND); do 
printf "%s\n" "$(generate_job_option $MODULE $option)"; 
done)  
EOF


# Done. Exit with last command exit status.
exit $?

